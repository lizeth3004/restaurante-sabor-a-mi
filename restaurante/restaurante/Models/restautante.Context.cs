//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace restaurante.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class restauranteEntities : DbContext
    {
        public restauranteEntities()
            : base("name=restauranteEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<tblCliente> tblCliente { get; set; }
        public virtual DbSet<tblMesa> tblMesa { get; set; }
        public virtual DbSet<tblPlato> tblPlato { get; set; }
        public virtual DbSet<tblTipoDoc> tblTipoDoc { get; set; }
        public virtual DbSet<tblDetallePlato> tblDetallePlato { get; set; }
    
        public virtual int insertarCliente(string nombreCliente, string apellidoCliente, Nullable<int> nroTipoDoc, Nullable<int> idTipoDoc)
        {
            var nombreClienteParameter = nombreCliente != null ?
                new ObjectParameter("nombreCliente", nombreCliente) :
                new ObjectParameter("nombreCliente", typeof(string));
    
            var apellidoClienteParameter = apellidoCliente != null ?
                new ObjectParameter("apellidoCliente", apellidoCliente) :
                new ObjectParameter("apellidoCliente", typeof(string));
    
            var nroTipoDocParameter = nroTipoDoc.HasValue ?
                new ObjectParameter("nroTipoDoc", nroTipoDoc) :
                new ObjectParameter("nroTipoDoc", typeof(int));
    
            var idTipoDocParameter = idTipoDoc.HasValue ?
                new ObjectParameter("idTipoDoc", idTipoDoc) :
                new ObjectParameter("idTipoDoc", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarCliente", nombreClienteParameter, apellidoClienteParameter, nroTipoDocParameter, idTipoDocParameter);
        }
    
        public virtual int orden(Nullable<int> idPlato, Nullable<int> idCliente, Nullable<int> idMesa, Nullable<int> cantidad)
        {
            var idPlatoParameter = idPlato.HasValue ?
                new ObjectParameter("idPlato", idPlato) :
                new ObjectParameter("idPlato", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            var idMesaParameter = idMesa.HasValue ?
                new ObjectParameter("idMesa", idMesa) :
                new ObjectParameter("idMesa", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("orden", idPlatoParameter, idClienteParameter, idMesaParameter, cantidadParameter);
        }
    
        public virtual int realizarOrden(string nombreCliente, string apellidoCliente, Nullable<int> nroTipoDoc, Nullable<int> idTipoDoc, Nullable<int> idPlato, Nullable<int> idMesa, Nullable<int> cantidad)
        {
            var nombreClienteParameter = nombreCliente != null ?
                new ObjectParameter("nombreCliente", nombreCliente) :
                new ObjectParameter("nombreCliente", typeof(string));
    
            var apellidoClienteParameter = apellidoCliente != null ?
                new ObjectParameter("apellidoCliente", apellidoCliente) :
                new ObjectParameter("apellidoCliente", typeof(string));
    
            var nroTipoDocParameter = nroTipoDoc.HasValue ?
                new ObjectParameter("nroTipoDoc", nroTipoDoc) :
                new ObjectParameter("nroTipoDoc", typeof(int));
    
            var idTipoDocParameter = idTipoDoc.HasValue ?
                new ObjectParameter("idTipoDoc", idTipoDoc) :
                new ObjectParameter("idTipoDoc", typeof(int));
    
            var idPlatoParameter = idPlato.HasValue ?
                new ObjectParameter("idPlato", idPlato) :
                new ObjectParameter("idPlato", typeof(int));
    
            var idMesaParameter = idMesa.HasValue ?
                new ObjectParameter("idMesa", idMesa) :
                new ObjectParameter("idMesa", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("realizarOrden", nombreClienteParameter, apellidoClienteParameter, nroTipoDocParameter, idTipoDocParameter, idPlatoParameter, idMesaParameter, cantidadParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
